/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package repeatselect;

import java.awt.Cursor;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;

/**
 *
 * @author pauloatavila
 */
public class Principal extends javax.swing.JFrame {

//    String[] numString = {"1","2","3","4","5","6","7","8","9","10"};
    String[] probelmasString = {"Não chegará o pacote", "Não chegará a confirmação do pacote"};
    ArrayList<Integer> problemasArrayList = new ArrayList<>();
    ArrayList<Integer> listProblemas = new ArrayList<>();
    int tamanhoDaJanela = 0;
    int numeroDePacotesRestantes = 0;
    ArrayList<Integer> pctEnviados = new ArrayList<>();
    ArrayList<Integer> pctRecebidos = new ArrayList<>();
    ArrayList<Integer> daVezNaJanela = new ArrayList<>();
    int disponivelJanela = 0;
    float valorProgressoPorVez = 0;
    float valorRealBarraDeProgresso = 0;

    public Principal() {
        initComponents();
        this.numPacotesComboBox.removeAllItems();
        this.numPacotesComboBox.addItem("1");
        this.numPacotesComboBox.addItem("2");
        this.numPacotesComboBox.addItem("3");
        this.numPacotesComboBox.addItem("4");
        this.numPacotesComboBox.addItem("5");
        this.numPacotesComboBox.addItem("6");
        this.numPacotesComboBox.addItem("7");
        this.numPacotesComboBox.addItem("8");
        this.numPacotesComboBox.addItem("9");
        this.numPacotesComboBox.addItem("10");

        this.numProblemasComboBox.removeAllItems();
        this.numProblemasComboBox.setEnabled(false);
        this.executarBtt.setEnabled(false);

        descricaoProblemasTextArea.setEditable(false);
        senderTextArea.setEditable(false);
        reciverTextArea.setEditable(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        numPacotesComboBox = new javax.swing.JComboBox<>();
        numProblemasComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        descricaoProblemasTextArea = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        senderTextArea = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        reciverTextArea = new javax.swing.JTextArea();
        executarBtt = new javax.swing.JButton();
        tamanhoJanelaLabel = new javax.swing.JLabel();
        barraProgresso = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setText("Protocolo Repeat Select");

        jLabel2.setText("Número de Pacotes a serem enviados:");

        jLabel3.setText("Número de Pacotes que ocorrerão algum problema:");

        numPacotesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        numPacotesComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                numPacotesComboBoxPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        numPacotesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numPacotesComboBoxActionPerformed(evt);
            }
        });

        numProblemasComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        numProblemasComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                numProblemasComboBoxPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        descricaoProblemasTextArea.setColumns(20);
        descricaoProblemasTextArea.setRows(5);
        jScrollPane1.setViewportView(descricaoProblemasTextArea);

        jLabel4.setText("Pacotes e seus problemas:");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel5.setText("Sender:");

        senderTextArea.setColumns(20);
        senderTextArea.setRows(5);
        jScrollPane2.setViewportView(senderTextArea);

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel6.setText("Reciver:");

        reciverTextArea.setColumns(20);
        reciverTextArea.setRows(5);
        jScrollPane3.setViewportView(reciverTextArea);

        executarBtt.setText("Executar Transferência");
        executarBtt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executarBttActionPerformed(evt);
            }
        });

        tamanhoJanelaLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        tamanhoJanelaLabel.setText("Tamanho da Janela: X");

        barraProgresso.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        barraProgresso.setStringPainted(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(numPacotesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(numProblemasComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(executarBtt)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(215, 215, 215))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6)
                                .addGap(313, 313, 313))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(tamanhoJanelaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(83, 83, 83)
                                .addComponent(barraProgresso, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(numPacotesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(numProblemasComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(executarBtt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tamanhoJanelaLabel)
                    .addComponent(barraProgresso, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void numPacotesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numPacotesComboBoxActionPerformed
        System.out.println("aqui");


    }//GEN-LAST:event_numPacotesComboBoxActionPerformed

    private void numPacotesComboBoxPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_numPacotesComboBoxPopupMenuWillBecomeInvisible
        System.out.println("Selecionado: " + (numPacotesComboBox.getSelectedIndex() + 1));
        this.numProblemasComboBox.removeAllItems();
        this.numProblemasComboBox.setEnabled(true);
        this.executarBtt.setEnabled(true);
        for (int i = 0; i < (numPacotesComboBox.getSelectedIndex() + 1); i++) {
            this.numProblemasComboBox.addItem("" + (i + 1));
        }
        tamanhoDaJanela = numPacotesComboBox.getSelectedIndex() + 1;
        numeroDePacotesRestantes = (numPacotesComboBox.getSelectedIndex() + 1);
        valorProgressoPorVez = 100 / (numPacotesComboBox.getSelectedIndex() + 1);
    }//GEN-LAST:event_numPacotesComboBoxPopupMenuWillBecomeInvisible

    private void numProblemasComboBoxPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_numProblemasComboBoxPopupMenuWillBecomeInvisible

    }//GEN-LAST:event_numProblemasComboBoxPopupMenuWillBecomeInvisible

    private void executarBttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executarBttActionPerformed

        setCursor(new Cursor(Cursor.WAIT_CURSOR));

        for (int j = problemasArrayList.size() - 1; j >= 0; j--) {
            problemasArrayList.remove(j);
        }

        for (int j = listProblemas.size() - 1; j >= 0; j--) {
            listProblemas.remove(j);
        }

        descricaoProblemasTextArea.setText("");
        senderTextArea.setText("");
        reciverTextArea.setText("");

        if (tamanhoDaJanela >= 3) {
            tamanhoDaJanela = 3;
        } else {
            tamanhoDaJanela = 1;
        }

        tamanhoJanelaLabel.setText("Tamanho da Janela " + tamanhoDaJanela);

        Random gerador = new Random();

        for (int i = 0; i < (numProblemasComboBox.getSelectedIndex() + 1); i++) {
            int rand = gerador.nextInt(2);
            problemasArrayList.add(rand);
            System.out.println("Rand: " + rand);
        }

        int problemas = (numProblemasComboBox.getSelectedIndex() + 1);
        while (problemas > 0) {
            int rand = gerador.nextInt((numPacotesComboBox.getSelectedIndex() + 2));
            if (rand != 0) {
                boolean jaTem = false;
                for (int j = 0; j < listProblemas.size(); j++) {
                    if (listProblemas.get(j) == rand) {
                        jaTem = true;
                    }
                }
                if (!jaTem) {
                    listProblemas.add(rand);
                    problemas--;
                }
            }
        }

        System.out.println("Tamanho do list problemas: " + listProblemas.size());
        for (int j = 0; j < listProblemas.size(); j++) {
            String linha = "Pacote " + listProblemas.get(j) + " apresentará o problema: " + probelmasString[problemasArrayList.get(j)] + "\n";
            descricaoProblemasTextArea.append(linha);
        }
        senderTextArea.append("Tentando se conectar com \"Reciver IP 127.326.864.88\"\n");
        iniciarConexao();
    }//GEN-LAST:event_executarBttActionPerformed

    public void iniciarConexao() {
        Thread novaThreadDecrementar;
        novaThreadDecrementar = new Thread() {
            public void run() {
                try {
                    Thread.sleep(1500);
                    reciverTextArea.append("Conexão estabelecida com \"Sender IP 127.639.711.36\"\n");
                    senderTextArea.append("Conexão estabelecida com \"Reciver IP 127.326.864.88\"\n");
                    reciverTextArea.append("\n-------------------------------------------------\n");
                    senderTextArea.append("-------------------------------------------------\n");
                    disponivelJanela = tamanhoDaJanela;
                    transferirPacotes();
                } catch (InterruptedException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        novaThreadDecrementar.start();

    }

    public void transferirPacotes() {
        System.out.println("TP INICIO");
        for (int j = daVezNaJanela.size() - 1; j >= 0; j--) {
            daVezNaJanela.remove(j);
        }
        for (int i = 1; i < (numPacotesComboBox.getSelectedIndex() + 2); i++) {
            boolean esseJafoi = false;
            for (int j = 0; j < pctRecebidos.size(); j++) {
                if (pctRecebidos.get(j) == i) {
                    esseJafoi = true;
                }
            }
            if (disponivelJanela > 0) {
                if (!esseJafoi) {
                    senderTextArea.append("Envio do pacote " + i + "\n");
                    disponivelJanela--;
                    daVezNaJanela.add(i);
                }
            } else {
                break;
            }
        }
        Thread novaThreadTranferencia;
        novaThreadTranferencia = new Thread() {
            public void run() {
                try {
                    Thread.sleep(1500);
                    verificacarTransferencia();
                } catch (InterruptedException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        novaThreadTranferencia.start();
        System.out.println("TP FIM");
    }

    public void verificacarTransferencia() {
        System.out.println("VT INICIO");
        for (int i = 0; i < daVezNaJanela.size(); i++) {
            boolean temProblema = false;
            for (int j = 0; j < listProblemas.size(); j++) {
                if (listProblemas.get(j) == daVezNaJanela.get(i)) {
                    temProblema = true;
                    break;
                }
            }

            if (daVezNaJanela.get(i) == 1) {
                if (!temProblema) {
                    reciverTextArea.append("Pacote " + daVezNaJanela.get(i) + " recebido com sucesso\n");
                    reciverTextArea.append("[ACK do pacote " + daVezNaJanela.get(i) + " enviado]\n");
                    senderTextArea.append("[ACK do pacote " + daVezNaJanela.get(i) + " recebido]\n");
                    pctRecebidos.add(daVezNaJanela.get(i));
                    valorRealBarraDeProgresso = valorRealBarraDeProgresso + valorProgressoPorVez;
                    barraProgresso.setValue((int) (valorRealBarraDeProgresso));
                    if (daVezNaJanela.get(i) == (numPacotesComboBox.getSelectedIndex() + 1)) {
                        barraProgresso.setValue(100);
                        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                    }
                } else {
                    int indexPctDaVez = listProblemas.indexOf(daVezNaJanela.get(i));
                    if (problemasArrayList.get(indexPctDaVez) == 1) {
                        reciverTextArea.append("Pacote " + daVezNaJanela.get(i) + " recebido com sucesso\n");
                        reciverTextArea.append("[ACK do pacote " + daVezNaJanela.get(i) + " enviado]\n");
                        senderTextArea.append("[TIMER END - ACK do pacote " + daVezNaJanela.get(i) + " não foi recebido]\n");
                    } else if (problemasArrayList.get(indexPctDaVez) == 0) {
                        senderTextArea.append("[TIMER END - ACK do pacote " + daVezNaJanela.get(i) + " não foi recebido]\n");
                    }
                    listProblemas.remove(daVezNaJanela.get(i));
                }
            } else {
                if (temProblema) {
                    int indexPctDaVez = listProblemas.indexOf(daVezNaJanela.get(i));
                    if (problemasArrayList.get(indexPctDaVez) == 1) {
                        reciverTextArea.append("Pacote " + daVezNaJanela.get(i) + " recebido com sucesso\n");
                        reciverTextArea.append("[ACK do pacote " + daVezNaJanela.get(i) + " enviado]\n");
                        senderTextArea.append("[TIMER END - ACK do pacote " + daVezNaJanela.get(i) + " não foi recebido]\n");
                    } else if (problemasArrayList.get(indexPctDaVez) == 0) {
                        senderTextArea.append("[TIMER END - ACK do pacote " + daVezNaJanela.get(i) + " não foi recebido]\n");
                    }
                    listProblemas.remove(daVezNaJanela.get(i));
                } else {
                    reciverTextArea.append("Pacote " + daVezNaJanela.get(i) + " recebido com sucesso\n");
                    reciverTextArea.append("[ACK do pacote " + daVezNaJanela.get(i) + " enviado]\n");
                    senderTextArea.append("[ACK do pacote " + daVezNaJanela.get(i) + " recebido]\n");
                    pctRecebidos.add(daVezNaJanela.get(i));
                    System.out.println("PACOTE: " + daVezNaJanela.get(i) + " recebido, progresso atual: " + valorRealBarraDeProgresso + "\n");
                    valorRealBarraDeProgresso = valorRealBarraDeProgresso + valorProgressoPorVez;
                    barraProgresso.setValue((int) (valorRealBarraDeProgresso));
                    if (daVezNaJanela.get(i) == (numPacotesComboBox.getSelectedIndex() + 1)) {
                        barraProgresso.setValue(100);
                        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                    }
                }
            }

            disponivelJanela++;
        }
        if (pctRecebidos.size() != (numPacotesComboBox.getSelectedIndex() + 1)) {
            Thread novaThreadTranferencia;
            novaThreadTranferencia = new Thread() {
                public void run() {
                    try {
                        reciverTextArea.append("-------------------------------------------------\n");
                        senderTextArea.append("-------------------------------------------------\n");
                        Thread.sleep(1500);
                        transferirPacotes();
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
            novaThreadTranferencia.start();
        }
        System.out.println("VT FIM");
    }

    public void transferencias() {

        for (int j = pctEnviados.size() - 1; j >= 0; j--) {
            pctEnviados.remove(j);
        }

        for (int j = pctRecebidos.size() - 1; j >= 0; j--) {
            pctRecebidos.remove(j);
        }

        Thread novaThreadTransferencia;
        novaThreadTransferencia = new Thread() {
            public void run() {
                try {
                    while (pctRecebidos.size() != (numPacotesComboBox.getSelectedIndex() + 1)) {

                        for (int w = daVezNaJanela.size() - 1; w >= 0; w--) {
                            daVezNaJanela.remove(w);
                        }

                        int restanteJanela = tamanhoDaJanela;
                        while (restanteJanela != 0) {
                            for (int w = 1; w <= (numPacotesComboBox.getSelectedIndex() + 1); w++) {
                                if (restanteJanela == 0) {
                                    break;
                                }
                                boolean jaFoi = false;
                                for (int i = 0; i < pctRecebidos.size(); i++) {
                                    if (w == pctRecebidos.get(i)) {
                                        jaFoi = true;
                                    }
                                }
                                if (!jaFoi) {
                                    senderTextArea.append("Tentativa de envio do pacote " + w + "\n");
                                    daVezNaJanela.add(w);
                                    restanteJanela--;
                                }
                            }
                        }
                        Thread.sleep(1500);
                        verifica();
                    }

//                    for(int pactSendoEnviado = 0; pactSendoEnviado<(numPacotesComboBox.getSelectedIndex()+1); pactSendoEnviado++){
//                        
//                        for(int i=0; i<listProblemas.size(); i++){
//                            if((listProblemas.get(i)) == (pactSendoEnviado+1)){
//                                System.out.println("AQUI "+(pactSendoEnviado+1));
//                            }
//                        }
//                        
//                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        novaThreadTransferencia.start();
    }

    public void verifica() {
        for (int i = 0; i < daVezNaJanela.size(); i++) {
            boolean temProblema = false;
            for (int j = 0; j < listProblemas.size(); j++) {
                if (daVezNaJanela.get(i) == listProblemas.get(j)) {
                    System.out.println("Pacote " + daVezNaJanela.get(i) + " possui problema!");
                    temProblema = true;
                    listProblemas.remove(daVezNaJanela.get(i));
                }
            }
            if (!temProblema) {

                if (daVezNaJanela.get(i) == 1) {
                    pctRecebidos.add(daVezNaJanela.get(i));
                    reciverTextArea.append("Pacote " + daVezNaJanela.get(i) + " recebido com sucesso\n");
                    reciverTextArea.append("ACK do pacote " + daVezNaJanela.get(i) + " enviado\n");
                    senderTextArea.append("ACK do pacote " + daVezNaJanela.get(i) + " recebido\n");
                } else {
                    int pctAnterior = (daVezNaJanela.get(i) - 1);
                    boolean jaRecebeu = false;
                    for (int w = 0; w < pctRecebidos.size(); w++) {
                        if (pctAnterior == pctRecebidos.get(w)) {
                            jaRecebeu = true;
                        }
                    }
                    if (jaRecebeu) {
                        pctRecebidos.add(daVezNaJanela.get(i));
                        reciverTextArea.append("Pacote " + daVezNaJanela.get(i) + " recebido com sucesso\n");
                    }
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barraProgresso;
    private javax.swing.JTextArea descricaoProblemasTextArea;
    private javax.swing.JButton executarBtt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox<String> numPacotesComboBox;
    private javax.swing.JComboBox<String> numProblemasComboBox;
    private javax.swing.JTextArea reciverTextArea;
    private javax.swing.JTextArea senderTextArea;
    private javax.swing.JLabel tamanhoJanelaLabel;
    // End of variables declaration//GEN-END:variables
}
